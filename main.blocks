<xml xmlns="https://developers.google.com/blockly/xml"><block type="device_button_event" id="vD)2I|90Qaz3WvTm-3,^" x="0" y="0"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="device_show_number" id="YK!3mfzz7vn/M?48tl?l"><comment pinned="false" h="80" w="160">basic.showNumber(trigonometry.sine(360, angleType.degrees))</comment><value name="number"><block type="trigonometry_sine" id="mXm~Mb;7roRpcsw%yZrI"><field name="angleType">angleType.degrees</field><value name="x"><shadow type="math_number" id="z7bU%3Ej?9U6zS?2pEC_"><field name="NUM">0</field></shadow></value></block></value></block></statement></block><block type="pxt-on-start" id="Bf+{(3hjgdl#J;cYv6r7" x="219" y="220"><statement name="HANDLER"><block type="typescript_statement" id="#r8agjNsbR`1gJELwgh_" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum angleType{" line1="    radians=1," line2="    degrees=2," line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="knY+X$rSI]^gv29B.KPC" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace trigonometry {" line1="    // Functions for trigonometry" line2="    /**" line3="    * Reads the angle  based on dimension, radians or degrees" line4="    */" line5="    //% weight=30 blockId=&quot;trigonometry_sine&quot; block=&quot;sine of angle %x | in %angleType&quot;" line6="    export function sine(x: number, Dim: angleType): number {" line7="    " line8="        switch(Dim){" line9="            case angleType.radians: return calculateSine(x, true)" line10="            case angleType.degrees: return  calculateSine(x, false)" line11="            default: return null" line12="        }" line13="    }" line14="    /**" line15="     * Function to calculate sine using Taylor series" line16="     */" line17="    function calculateSine(angle: number, dim: boolean) {" line18="        // Use Taylor or Maclaurin series upto 6 terms" line19="        if (!dim) " line20="            angle = degToRad(angle)" line21="" line22="        return calculateSineUsingTaylor(angle)" line23="    }" line24="" line25="    function calculateSineUsingTaylor(angle: number) {" line26="        let val = 0;" line27="        for (let i = 1, k = 1; k &lt; 18; i++, k += 2) {" line28="            if (i % 2)" line29="                val += (angle ** k)/factorial(k)" line30="            else" line31="                val -= (angle ** k)/factorial(k)" line32="        }" line33="        return val" line34="    }" line35="" line36="    function degToRad(degrees: number) {" line37="        return degrees * (Math.PI / 180)" line38="    }" line39="    function radToDeg(rad: number) {" line40="        return rad / (Math.PI / 180)" line41="    }" line42="    function factorial(n: number) {" line43="        let answer = 1" line44="        if (n == 0 || n == 1){" line45="            return answer" line46="        }else{" line47="            for(let j = n; j &gt;= 1; j--){" line48="                answer = answer * j" line49="            }" line50="            return answer" line51="        }  " line52="    }" line53="}" numlines="54"></mutation></block></next></block></statement></block></xml>