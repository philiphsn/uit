<xml xmlns="https://developers.google.com/blockly/xml"><block type="device_button_event" id="8px057v_Ft[WEzMv?9(C" x="0" y="0"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="device_show_number" id="Zxx[)HEz8tSl.dGNa,a8"><value name="number"><block type="trigonometry_sine" id="+!ZhZR47#[),8cY`*Y[6"><field name="angleType">angleType.radians</field><value name="x"><shadow type="protractorPicker" id="~g!^}1vR@3i5!2LyK;^n"><field name="angle">0</field></shadow></value></block></value></block></statement></block><block type="pxt-on-start" id="A]SOd|jb%bo%yxw3eHX_" x="79" y="80"><statement name="HANDLER"><block type="typescript_statement" id=":h.eaqtgnSYzG+Sm*TZY" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum angleType{" line1="    radians=1," line2="    degrees=2," line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="y:QgIrT9Tax+.q$s~+Kn" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace trigonometry {" line1="    // Functions for trigonometry" line2="    /**" line3="    * Reads the angle based on radians or degrees." line4="    */" line5="    //% color=#fc2003 weight=30 blockId=&quot;trigonometry_sine&quot; icon=&quot;\uf209&quot; block=&quot;sine of angle %x | in %angleType&quot;" line6="    //% x.shadow=&quot;protractorPicker&quot;" line7="    export function sine(x: number, Dim: angleType): number {" line8="    " line9="        switch(Dim){" line10="            case angleType.radians: return calculateSine(x, true)" line11="            case angleType.degrees: return  calculateSine(x, false)" line12="            default: return null" line13="        }" line14="    }" line15="    //% color=#fc2003 weight=30 blockId=&quot;trigonometry_sinh&quot; icon=&quot;\uf209&quot; block=&quot;sinh of x %x&quot;" line16="    //% x.shadow=&quot;protractorPicker&quot;" line17="    export function sinh(x: number): number {" line18="    " line19="        /*switch(Dim){" line20="            case angleType.radians: return calculateSine(x, true)" line21="            case angleType.degrees: return  calculateSine(x, false)" line22="            default: return null" line23="        }*/" line24="        return 0" line25="    }" line26="    //% color=#fc2003 weight=30 blockId=&quot;trigonometry_cosh&quot; icon=&quot;\uf209&quot; block=&quot;cosh of x %x&quot;" line27="    //% x.shadow=&quot;protractorPicker&quot;" line28="    export function cosh(x: number): number {" line29="    " line30="        /*switch(Dim){" line31="            case angleType.radians: return calculateSine(x, true)" line32="            case angleType.degrees: return  calculateSine(x, false)" line33="            default: return null" line34="        }*/" line35="        return 0" line36="    }" line37="    //% color=#fc2003 weight=30 blockId=&quot;trigonometry_tanh&quot; icon=&quot;\uf209&quot; block=&quot;tanh of x %x&quot;" line38="    //% x.shadow=&quot;protractorPicker&quot;" line39="    export function tanh(x: number): number {" line40="    " line41="        /*switch(Dim){" line42="            case angleType.radians: return calculateSine(x, true)" line43="            case angleType.degrees: return  calculateSine(x, false)" line44="            default: return null" line45="        }*/" line46="        return 0" line47="    }" line48="" line49="    /**" line50="     * Function to calculate sine using Taylor series" line51="     */" line52="    function calculateSine(angle: number, dim: boolean) {" line53="        // Use Taylor series upto 9 terms" line54="        if (!dim) " line55="            angle = degToRad(angle);" line56="" line57="        return calculateSineUsingTaylor(angle);" line58="    }" line59="" line60="    function calculateSineUsingTaylor(angle: number) {" line61="        let val = 0;" line62="        for (let i = 1, k = 1; k &lt; 18; i++, k += 2) {" line63="            if (i % 2)" line64="                val += (angle ** k)/factorial(k)" line65="            else" line66="                val -= (angle ** k)/factorial(k)" line67="        }" line68="        return val" line69="    }" line70="" line71="    function degToRad(degrees: number) {" line72="        return degrees * (Math.PI / 180)" line73="    }" line74="    function radToDeg(rad: number) {" line75="        return rad / (Math.PI / 180)" line76="    }" line77="    function factorial(n: number) {" line78="        let answer = 1" line79="        if (n == 0 || n == 1){" line80="            return answer" line81="        }else{" line82="            for(let j = n; j &gt;= 1; j--){" line83="                answer = answer * j" line84="            }" line85="            return answer" line86="        }  " line87="    }" line88="}" numlines="89"></mutation></block></next></block></statement></block></xml>