<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="[a:!ueduoU1{[p=)Es7@" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="[8v(Y;/Qa|^^^MJ6+Nl$" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum gatorMoistureType{" line1="    moisture=1," line2="    adcVal=2," line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="vmg6lwYs`(SJ4q@;Ane|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace gatorMoisture {" line1="" line2="    // Functions for reading moisture from the gatormoisture in moisture or straight adv value" line3="" line4="    /**" line5="    * Reads the number" line6="    */" line7="    //% weight=30 blockId=&quot;gatorMoisture_moisture&quot; block=&quot;Get moisture on pin %pin | in %gatorMoistureType&quot;" line8="    export function moisture(pin: AnalogPin, type: gatorMoistureType): number{" line9="        let ADCVal = pins.analogReadPin(pin)" line10="        switch(type){" line11="            case gatorMoistureType.moisture: return getMoisture(ADCVal)" line12="            case gatorMoistureType.adcVal: return ADCVal" line13="            default: return -11111111" line14="        }" line15="    }" line16="" line17="    /**" line18="     * Function used for simulator, actual implementation is in gatormoisture.cpp" line19="     */" line20="    //% shim=gatorMoisture::getMoisture" line21="    function getMoisture(ADCVal: number) {" line22="        // Fake function for simulator" line23="        return 0" line24="    }" line25="}" numlines="26"></mutation></block></next></block></statement></block></xml>