<xml xmlns="https://developers.google.com/blockly/xml"><block type="device_button_event" id="7ky?Drh5+XjM@n69w|Pm" x="0" y="0"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="device_show_number" id="@^l){,L-s|YrAbD:s,CW"><value name="number"><block type="trigonometry_sine" id="_@aBxJKpe#.6{X{;N3(V"><field name="angleType">angleType.radians</field><value name="x"><shadow type="protractorPicker" id="*Ew{aCJw].}}p`$sN,zz"><field name="angle">0</field></shadow></value></block></value></block></statement></block><block type="pxt-on-start" id="V*|E#VrKZ#@WSJG+DXEb" x="119" y="120"><statement name="HANDLER"><block type="typescript_statement" id="?t6_e#*Ui+)%n;=cw)G]" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum angleType{" line1="    radians=1," line2="    degrees=2," line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="+MIze+3n%Pen]6Z]s3^(" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace trigonometry {" line1="    // Functions for trigonometry" line2="    /**" line3="    * Reads the angle based on radians or degrees." line4="    */" line5="    //% color=#fc2003 weight=30 blockId=&quot;trigonometry_sine&quot; icon=&quot;\uf209&quot; block=&quot;sine of angle %x | in %angleType&quot;" line6="    //% x.shadow=&quot;protractorPicker&quot;" line7="    export function sine(x: number, Dim: angleType): number {" line8="    " line9="        switch(Dim){" line10="            case angleType.radians: return calculateSine(x, true)" line11="            case angleType.degrees: return  calculateSine(x, false)" line12="            default: return null" line13="        }" line14="    }" line15="    /**" line16="     * Function to calculate sine using Taylor series" line17="     */" line18="    function calculateSine(angle: number, dim: boolean) {" line19="        // Use Taylor series upto 9 terms" line20="        if (!dim) " line21="            angle = degToRad(angle);" line22="" line23="        return calculateSineUsingTaylor(angle);" line24="    }" line25="" line26="    function calculateSineUsingTaylor(angle: number) {" line27="        let val = 0;" line28="        for (let i = 1, k = 1; k &lt; 18; i++, k += 2) {" line29="            if (i % 2)" line30="                val += (angle ** k)/factorial(k)" line31="            else" line32="                val -= (angle ** k)/factorial(k)" line33="        }" line34="        return val" line35="    }" line36="" line37="    function degToRad(degrees: number) {" line38="        return degrees * (Math.PI / 180)" line39="    }" line40="    function radToDeg(rad: number) {" line41="        return rad / (Math.PI / 180)" line42="    }" line43="    function factorial(n: number) {" line44="        let answer = 1" line45="        if (n == 0 || n == 1){" line46="            return answer" line47="        }else{" line48="            for(let j = n; j &gt;= 1; j--){" line49="                answer = answer * j" line50="            }" line51="            return answer" line52="        }  " line53="    }" line54="}" numlines="55"></mutation></block></next></block></statement></block></xml>